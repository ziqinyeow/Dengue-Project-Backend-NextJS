// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  // previewFeatures = ["referentialIntegrity", "dataProxy"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  // url                  = "mysql://127.0.0.1:3309/dengueapi"
  referentialIntegrity = "prisma"
}

model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String
  type     String @default("admin") // admin or superuser
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password String
  token    String?   @db.Text
  fullname String?
  username String?
  ic       String    @unique
  phone_no String?
  address  String?   @db.LongText
  postcode String?
  state    String?
  gender   String?
  status   String?
  fp_token String?
  group    String?   @default("user") //  user, patient
  detail   Detail[]
  answer   Answer[]
  symptom  Symptom[]
  history  History[]

  patient    Patient? @relation(fields: [patient_id], references: [id], onDelete: SetNull)
  patient_id String?
}

// to allow unregistered user to be record as a patient
model Patient {
  id     String    @id @default(cuid())
  ic     String    @unique
  email  String    @unique
  status String? // active, completed monitoring, admitted
  start  DateTime  @default(now())
  end    DateTime? @updatedAt
  user   User?
}

model Symptom {
  id        String   @id @default(cuid())
  response  String? // 7 questions -> 1 1 2 4 -> question 1: selection 1, question 2: selection 4
  status    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String

  @@index([user_id])
}

// diagnose history (KIV)
model History {
  id      String    @id @default(cuid())
  ic      String
  email   String
  status  String? // active, completed monitoring, admitted
  start   DateTime  @default(now())
  end     DateTime? @updatedAt
  user    User?     @relation(fields: [user_id], references: [id])
  user_id String

  @@index([user_id])
}

model Detail {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  temperature    Decimal?
  blood_pressure Decimal?
  pulse_rate     Decimal?
  hemoglobin     Decimal?
  hematocrit     Decimal?
  white_cell     Decimal?
  platelet       Decimal?
  user           User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        String?

  @@index([user_id])
}

model Question {
  id            String   @id @default(cuid())
  question      String
  answer_scheme String   @db.Text
  explanation   String?  @db.LongText
  url           String?  @db.LongText
  url_type      String? //image or video
  answer        Answer[]
}

model Answer {
  id          String   @id @default(cuid())
  answer_date DateTime @default(now())
  answer      String
  question_id String
  question    Question @relation(fields: [question_id], references: [id])
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])

  @@index([question_id, user_id])
}

model Task {
  id          String  @id @default(cuid())
  name        String
  description String? @db.LongText
  priority    Int     @default(0)
}

model News {
  id    String  @id @default(cuid())
  title String
  text  String? @db.LongText
}
