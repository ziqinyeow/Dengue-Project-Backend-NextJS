// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  // previewFeatures = ["referentialIntegrity", "dataProxy"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  // url                  = "mysql://127.0.0.1:3309/dengueapi"
  referentialIntegrity = "prisma"
}

model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String
  type     String @default("admin") // admin or superuser
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  password       String
  token          String?          @db.Text
  fullname       String?
  username       String?
  ic             String           @unique
  phone_no       String?
  address        String?          @db.LongText
  postcode       String?
  state          String?
  gender         String?
  age            Int?
  status         String?
  fp_token       String?
  group          String?          @default("user") //  user, patient
  vital_sign     Vital_sign[]
  blood_profile  Blood_profile[]
  answer         Answer[]
  symptom        Symptom[]
  history        History[]
  patient        Patient?
  seek_help_form Seek_help_form[]
}

// to allow unregistered user to be record as a patient
model Patient {
  id        String    @id @default(cuid())
  ic        String    @unique
  email     String    @unique
  status    String    @default("active") // active, completed monitoring, admitted
  seek_help Boolean   @default(false)
  start     DateTime  @default(now())
  end       DateTime? @updatedAt
  user      User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  user_id   String?   @unique
}

model Symptom {
  id        String   @id @default(cuid())
  response  String? // 7 questions -> 1 1 2 4 -> question 1: selection 1, question 2: selection 4
  status    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String

  @@index([user_id])
}

// diagnose history (KIV)
model History {
  id      String    @id @default(cuid())
  ic      String
  email   String
  status  String? // active, completed monitoring, admitted
  start   DateTime  @default(now())
  end     DateTime?
  user    User?     @relation(fields: [user_id], references: [id])
  user_id String

  @@index([user_id])
}

model Vital_sign {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  temperature       Decimal?
  blood_pressure    Decimal?
  pulse_rate        Decimal?
  respiratory_rate  Decimal?
  oxygen_saturation Decimal?
  user              User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           String?

  @@index([user_id])
}

model Blood_profile {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  haemoglobin Decimal?
  haematocrit Decimal?
  white_cell  Decimal?
  platelet    Decimal?
  user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String?

  @@index([user_id])
}

model Answer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  module     Int?
  answer     String?  @db.LongText
  no_correct Int      @default(0)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Seek_help_form {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  i         String?   @db.LongText
  ii        DateTime?
  iii       String?
  user      User      @relation(fields: [user_id], references: [id])
  user_id   String

  @@index([user_id])
}
